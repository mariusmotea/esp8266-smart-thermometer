
#include "SSD1306Brzo.h"
#include <DHT.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

#define DHTPIN 5     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 11


// Initialize the OLED display using brzo_i2c
// D3 -> SDA
// D5 -> SCL
SSD1306Brzo display(0x3c, D3, D5);

// Initialize DHT sensor for normal 16mhz Arduino
DHT dht(DHTPIN, DHTTYPE);

const char* ssid = "..........";
const char* password = ".........";

static char WiFi_Logo_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x0F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0x07, 0x80, 0x07, 0x03, 0x80, 0xFF, 0xFF, 0xFF, 
  0x01, 0x00, 0x0E, 0x03, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00, 
  0xC0, 0x73, 0xC6, 0x7C, 0x00, 0xE0, 0x18, 0x00, 0xE0, 0x21, 0x44, 0x78, 
  0xFC, 0xE7, 0x10, 0x00, 0xE0, 0x23, 0xC4, 0x3C, 0xFC, 0xE7, 0x10, 0x00, 
  0xE0, 0x23, 0xC4, 0x3C, 0x1C, 0x00, 0x30, 0x00, 0xE0, 0x03, 0x40, 0x38, 
  0x1C, 0xE0, 0x30, 0x00, 0xE0, 0x03, 0x60, 0x38, 0x3C, 0xE0, 0x30, 0x00, 
  0xE0, 0x07, 0x60, 0x38, 0xFC, 0xE7, 0x30, 0x00, 0xE0, 0x07, 0x60, 0x38, 
  0xFC, 0xE7, 0x30, 0x00, 0xE0, 0x87, 0x60, 0x38, 0x1C, 0xE0, 0x30, 0x00, 
  0xE0, 0x87, 0x70, 0x38, 0x1C, 0xE0, 0x30, 0x00, 0xE0, 0x8F, 0x71, 0x38, 
  0x1C, 0xE0, 0x10, 0x00, 0xC0, 0xCF, 0xF9, 0x3C, 0x00, 0x00, 0x18, 0x00, 
  0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x18, 0x00, 0x80, 0xFF, 0xFF, 0x1F, 
  0x00, 0x00, 0x0C, 0x00, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x06, 0x00, 
  0x00, 0xFE, 0xFF, 0x07, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x3F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };

static char cloud[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x60, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x03, 0x1C, 
  0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x80, 0x03, 
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x0F, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1C, 0x20, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 
  0xFF, 0x03, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x03, 0x0F, 0x00, 0x00, 0x00, 
  0x06, 0xE0, 0x00, 0x1C, 0x00, 0x00, 0x7F, 0x06, 0x60, 0x00, 0x18, 0x00, 
  0x00, 0x7F, 0x06, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 
  0x30, 0x00, 0x00, 0x00, 0x0E, 0x18, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x0C, 
  0x18, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0x1C, 0x18, 0x00, 0x60, 0x78, 0x00, 
  0x00, 0x38, 0x18, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x30, 0x1E, 0x00, 0x00, 
  0xC0, 0x01, 0x00, 0x03, 0x1F, 0x00, 0x00, 0x80, 0x01, 0x80, 0x83, 0x03, 
  0x00, 0x00, 0x80, 0x03, 0xC0, 0xC1, 0x01, 0x00, 0x00, 0x00, 0x03, 0xE0, 
  0xE0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x80, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0xE0, 
  0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xE0, 0x00, 
  0x00, 0x80, 0x03, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
  0x3F, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x60, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x70, 0x00, 0x80, 0x03, 
  0x00, 0x00, 0x00, 0x38, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 
  0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00,
};

ESP8266WebServer server(80);

const int led = 13;

void handleRoot() {
  digitalWrite(led, 1);
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  server.send(200, "text/plain", "Humidity: " + String(h) + "%\nTemp: " + String(t) + "C");
  digitalWrite(led, 0);
}

void handleNotFound(){
  digitalWrite(led, 1);
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET)?"GET":"POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i=0; i<server.args(); i++){
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  digitalWrite(led, 0);
}

void setup(){
  pinMode(D2, OUTPUT);
  digitalWrite(D2, LOW);
  delay(500);
  digitalWrite(D2, HIGH);
  // Initialising the UI will init the display too.
  display.init();
  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_16);
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.drawXbm(34,10, 60, 36, WiFi_Logo_bits);
  display.display();
  delay(1000);
  display.clear();
  dht.begin(); // initialize dht
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("");

  server.on("/", handleRoot);

  server.on("/inline", [](){
    server.send(200, "text/plain", "this works as well");
  });

  server.onNotFound(handleNotFound);

  server.begin();
}

void displayTempHumid(){
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius
  float t = dht.readTemperature();

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)){
    display.clear(); // clearing the display
    display.drawString(5,0, "Failed DHT");
    return;
  }
  display.clear();
  display.setFont(ArialMT_Plain_24);
  display.drawString(55, 0, String(t) + "Â°"); 
  display.drawString(55, 22, String(h));
  display.setFont(ArialMT_Plain_16);
  display.drawString(114, 27, "%");
}
void loop(){
  server.handleClient();
  displayTempHumid();
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 50, ssid + String(" | ") + String(WiFi.localIP()[0]) + "." + String(WiFi.localIP()[1]) + "." + String(WiFi.localIP()[2]) + "." + String(WiFi.localIP()[3]));
  display.drawXbm(0,0, 50, 50, cloud);
  display.display();
}

